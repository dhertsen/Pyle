#! /usr/bin/python
import pyle.profile as prof
import pyle.energetics as ener
from pandas import DataFrame

from ConfigParser import SafeConfigParser
from argparse import ArgumentParser

parser = ArgumentParser('Write a simple energetic profile')
parser.add_argument('pdf', help='plotted profile (PDF)')
parser.add_argument('--csv', '-c', help='energies and/or filenames (CSV)')
parser.add_argument('--style', '-s', help='style file')
parser.add_argument('--example', '-x', help='write an example style file')
parser.add_argument('--profile', '-p', nargs='*', action='append',
                    help='add a profile (energies and/or filenames')
args = parser.parse_args()

energies = DataFrame()
if args.csv:
    energies = energies.append(ener.parse(ener.csv(args.csv)))
if args.profile:
    energies = energies.append(ener.parse(DataFrame(args.profile)))

if args.style:
    defaults = {'barlength': '3.0', 'space': '2.0', 'usetex': 'True',
                'barstyle': '-', 'barwidth': '3.0',
                'leapstyle': ':', 'leapwidth': '1.0',
                'toplabels': '', 'bottomlabels': '',
                'fontsize': '12.0', 'width': '0', 'height': '0'}

    scp = SafeConfigParser(defaults)
    scp.read(args.style)

    canvas = prof.Canvas(width=scp.getfloat('global', 'barlength'),
                         space=scp.getfloat('global', 'space'),
                         tex=scp.getboolean('global', 'usetex'))

    canvas.add_profiles(energies)

    canvas.set_bar_style(linestyle=scp.get('global', 'barstyle'))
    canvas.set_bar_style(linewidth=scp.getfloat('global', 'barwidth'))
    canvas.set_leap_style(linestyle=scp.get('global', 'leapstyle'))
    canvas.set_leap_style(linewidth=scp.getfloat('global', 'barwidth'))

    def labels(i, scpline):
        if scpline.strip() == 'energy':
            return ['energy'] * len(canvas.profiles[i])
        else:
            return [x.strip() if x.strip() != 'none'
                    else '' for x in scpline.split()]

    for s in scp.sections():
        if 'profile' in s:
            i = int(s.split()[1])
            canvas.profiles[i].set_style(color=scp.get(s, 'color'))
            canvas.profiles[i].set_toplabels(
                labels(i, scp.get(s, 'toplabels')))
            canvas.profiles[i].set_bottomlabels(
                labels(i, scp.get(s, 'bottomlabels')))

    canvas.set_label_style(fontsize=scp.getfloat('global', 'fontsize'))
    w, h = scp.getfloat('global', 'width'), scp.getfloat('global', 'height')
    if w and h:
        canvas.set_size(w, h)
    elif w or h:
        print('Both width and height must be specified.')
        print('Ignoring width/height.')
else:
    canvas = prof.Canvas()
    canvas.add_profiles(energies)
canvas.save(args.pdf)

if args.example:
    gopt = '''[global]
barlength: 3
space: 2
usetex: yes
barwidth: 3
barstyle: -
leapwidth: 1
leapstyle: :
fontsize: 12
width: 5
height: 3
'''
    comment = '''
# For text labels use "bottomlabels: a b c".
# Use none to skip a bar.'''

    popt_template = '''
[profile %i]
color: black
toplabels: energy
bottomlabels:
'''

    if not energies.empty:
        popt = ''.join([popt_template % k for k in range(energies.shape[0])])
    else:
        popt = popt_template % 0

    open(args.example, 'w').write(gopt + comment + popt)
    print('%s written.' % args.example)
